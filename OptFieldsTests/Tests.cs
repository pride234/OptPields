using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using OptField;
using NUnit.Framework;

namespace OptFieldsTests
{
    [TestFixture]
	public class Tests
    {
	//-----------------Addition-------------------------------------------------------------------------------------------------------------------------------------------------------------------|		

		[Test]
		
		[TestCase("00001010101111100000101100110100000101000001011101100011001110110000100001010011111001101111110111100000011011001000001100101100111100011001100100100001000000101110000110000",
		"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		"00001010101111100000101100110100000101000001011101100011001110110000100001010011111001101111110111100000011011001000001100101100111100011001100100100001000000101110000110000")]
		
		[TestCase("01110100101010001010011110000010101001100011101100111000001100100011000010111011010101000110000101110111100011101100011110111010110001110000011101010101011101010101100010010",
		"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
		"10001011010101110101100001111101010110011100010011000111110011011100111101000100101010111001111010001000011100010011100001000101001110001111100010101010100010101010011101101")]

		[TestCase("00001111010011011100100101111101100110100101010100101100110000100101101101001000110110101000110100001011001000000000110101111000110000010010000010111011111000111101110000110",
		"01110100101110110110011010111101101101110000101011110101010010110110101011101110001111100101101010101001000010101010001011101010001111100100001111011001001000101010101111001",
		"01111011111101101010111111000000001011010101111111011001100010010011000110100110111001001101011110100010001010101010111110010010111111110110001101100010110000010111011111111")]
		
		[TestCase("00110001010001011000010000000110000100100011111101010010011111101001100000001010010000111111010001010010101001101101010101000111000101011000110010000101011010101100111011010",
		"10001111101100101111000001010101101001100001001111110101101010110001111001100110000101010001000100010111010000001100101110000100100111011101000000101000111000001010110010001",
		"10111110111101110111010001010011101101000010110010100111110101011000011001101100010101101110010101000101111001100001111011000011100010000101110010101101100010100110001001011")]
		
		[TestCase("01011011111101001100110010101100110010110010111000000101011110010111101111011000100101111100000111101001000110001000010011110101000110011111000000100110110010010010101110000",
		"01011011100000000010101001001110000100101010001101001000001000101100110010000111000110101001110111100100100111110000000010110010000110101010000000001110010110110101011011001",
		"00000000011101001110011011100010110110011000110101001101010110111011011101011111100011010101110000001101100001111000010001000111000000110101000000101000100100100111110101001")]
		
		[TestCase("01101011111101000001000000101110111001111101110001001001100011000010111100110011101110101110111010011000101110100010110110110111101111010110011111110111000001000101100100110",
		"00011010010110101110001100111110011011000000001000110101110110100010110101101111000110011001111100010001001010010010001011011101011100001011011111011101111101101011110000000",
		"01110001101011101111001100010000100010111101111001111100010101100000001001011100101000110111000110001001100100110000111101101010110011011101000000101010111100101110010100110")]
		
		[TestCase("10101101001101001011011011010000111101100001010110001011011000010101010100100010010100011101001010101111000000001001010111100001101111001001111001111100010110010010101011101",
		"11010011110101101010001110111110110011101001010111000011111001000100101111110101100110100110011010110101100100101010001101110100111011111110001111111101110010100001000101010",
		"01111110111000100001010101101110001110001000000001001000100001010001111011010111110010111011010000011010100100100011011010010101010100110111110110000001100100110011101110111")]
		
		[TestCase("00001101000110001010001010100110010101000111101011101110010111101011000110001101011101001001110111000010001000000000010100000001000000111000100010000001101100010101110010011",
		"00101100100111100111010011101111001110110000100000101101101100101101110101011011011001011001000111111001111100100100100101011011100100110100000010011011001110100111110000011",
		"00100001100001101101011001001001011011110111001011000011111011000110110011010110000100010000110000111011110100100100110001011010100100001100100000011010100010110010000010000")]
		
		[TestCase("01100000000101101010111111111000101100100110101010100010111101100011010101111110010000001000110001010000001011010110110111010110111001110100000010011000100011010000001110011",
		"01110110001100111101000111101111000110000011100010001101001101111111001110101101000100000101011101010011110010100101011011100110110010010100000100100001000100011001000001001",
		"00010110001001010111111000010111101010100101001000101111110000011100011011010011010100001101101100000011111001110011101100110000001011100000000110111001100111001001001111010")]

		public void AdditionTests(string a, string b, string expected) 
		{
			var a_number = new Polynomial(a);
			var b_number = new Polynomial(b);
			
			var actual = a_number.Add(b_number).ToBit();

			Assert.AreEqual(expected, actual);
		}
//-----------------Square-------------------------------------------------------------------------------------------------------------------------------------------------------------------|		

		[Test]
		
		[TestCase("00111001111010010001010110000110100000011010101111011001101001110001011010010010010100100101011111010000000110111101111101111110110100011100001011010011000111001111011101011",
		"10011100111101001000101011000011010000001101010111101100110100111000101101001001001010010010101111101000000011011110111110111111011010001110000101101001100011100111101110101")]
		
		[TestCase("00010000111100001001110100101110111000111110011110101010110111100100010101001010101110100010100000010010010011011010100001111110110100110011110101011110110101111001111100010",
		"00001000011110000100111010010111011100011111001111010101011011110010001010100101010111010001010000001001001001101101010000111111011010011001111010101111011010111100111110001")]

		[TestCase("10101101000100101111111011100101100010010101000011000100100010000100000110010100100001100001011000000100011111001110110001111001011011100111011111101101110001111010000101111",
		"11010110100010010111111101110010110001001010100001100010010001000010000011001010010000110000101100000010001111100111011000111100101101110011101111110110111000111101000010111")]

		[TestCase("00100011101110111111000100110101000101010001001101101111100101100000111011000101101100001100000010100010110011010111010111000011001011001000011001000011010001011111101010111",
		"10010001110111011111100010011010100010101000100110110111110010110000011101100010110110000110000001010001011001101011101011100001100101100100001100100001101000101111110101011")]

		[TestCase("11000011111010111000000000111000111100001100001001110000110110110110111011011010001101000101101100001010000110011111000110000110011111110010110001000101001001010101110101101",
		"11100001111101011100000000011100011110000110000100111000011011011011011101101101000110100010110110000101000011001111100011000011001111111001011000100010100100101010111010110")]

		[TestCase("11010000110011111100000000100111010010111000101111110101010101110010100000001010101100000010010100001110101111000111001001010100110000010101111101000100110011101010110010010",
		"01101000011001111110000000010011101001011100010111111010101010111001010000000101010110000001001010000111010111100011100100101010011000001010111110100010011001110101011001001")]

		[TestCase("01110011111000011001010010011000001111010000011011011011001011110101001000110011001011001001001110101011011110011110101101001001001000110111011001001011001000101001000100100",
		"00111001111100001100101001001100000111101000001101101101100101111010100100011001100101100100100111010101101111001111010110100100100100011011101100100101100100010100100010010")]

		[TestCase("10111111111101010010110111001000111110000101000110110011110000010100001010100001101101000001101101101100110011110110010011010001010000100000111001101111101011101100001111010",
		"01011111111110101001011011100100011111000010100011011001111000001010000101010000110110100000110110110110011001111011001001101000101000010000011100110111110101110110000111101")]

		public void SquareTests(string a, string expected) 
		{
			var a_number = new Polynomial(a);
			
			var actual = a_number.Square().ToBit();

			Assert.AreEqual(expected, actual);
		}
//-----------------Multiplication-------------------------------------------------------------------------------------------------------------------------------------------------------------------|		

		[Test]
		
		[TestCase("00001010101111100000101100110100000101000001011101100011001110110000100001010011111001101111110111100000011011001000001100101100111100011001100100100001000000101110000110000",
		"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
		
		[TestCase("01110100101010001010011110000010101001100011101100111000001100100011000010111011010101000110000101110111100011101100011110111010110001110000011101010101011101010101100010010",
		"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
		"01110100101010001010011110000010101001100011101100111000001100100011000010111011010101000110000101110111100011101100011110111010110001110000011101010101011101010101100010010")]

		[TestCase("00001111010011011100100101111101100110100101010100101100110000100101101101001000110110101000110100001011001000000000110101111000110000010010000010111011111000111101110000110",
		"01110100101110110110011010111101101101110000101011110101010010110110101011101110001111100101101010101001000010101010001011101010001111100100001111011001001000101010101111001",
		"11000001001011101010100011111101110010100011001101100100100100011011100111100100001000011100100011011000001011010001001011011100011100001111000110101101011011001100010100111")]
		
		[TestCase("00110001010001011000010000000110000100100011111101010010011111101001100000001010010000111111010001010010101001101101010101000111000101011000110010000101011010101100111011010",
		"10001111101100101111000001010101101001100001001111110101101010110001111001100110000101010001000100010111010000001100101110000100100111011101000000101000111000001010110010001",
		"10101001000011001110000100111000101001010000111000110010111100111101110000011001001010101010011111111000101101111001110101100110100001000000011100111101100001000011001100101")]
		
		[TestCase("01011011111101001100110010101100110010110010111000000101011110010111101111011000100101111100000111101001000110001000010011110101000110011111000000100110110010010010101110000",
		"01011011100000000010101001001110000100101010001101001000001000101100110010000111000110101001110111100100100111110000000010110010000110101010000000001110010110110101011011001",
		"10001010001010011110110110010101000110100011111101000001101110010110110101011111100111100000100100101001010000011101000000110010001011001000000100101010000011100000001010010")]
		
		[TestCase("01101011111101000001000000101110111001111101110001001001100011000010111100110011101110101110111010011000101110100010110110110111101111010110011111110111000001000101100100110",
		"00011010010110101110001100111110011011000000001000110101110110100010110101101111000110011001111100010001001010010010001011011101011100001011011111011101111101101011110000000",
		"10001111101101011100000111001010111001100010100110100010100101001110011000010101101011011100010110000110111101100111001010101101101110101011110000001000000011001011000000001")]
		
		[TestCase("10101101001101001011011011010000111101100001010110001011011000010101010100100010010100011101001010101111000000001001010111100001101111001001111001111100010110010010101011101",
		"11010011110101101010001110111110110011101001010111000011111001000100101111110101100110100110011010110101100100101010001101110100111011111110001111111101110010100001000101010",
		"11000111111000100001011001000010001001100010011110101110001100110000011100000011101001011110010000010101000110110100100110110000111001010100110001001110000100001101001010010")]
		
		[TestCase("00001101000110001010001010100110010101000111101011101110010111101011000110001101011101001001110111000010001000000000010100000001000000111000100010000001101100010101110010011",
		"00101100100111100111010011101111001110110000100000101101101100101101110101011011011001011001000111111001111100100100100101011011100100110100000010011011001110100111110000011",
		"11111111100000111001111011110000010110000000111011110111010011000001000001000010111000110110010001110011001010011101001111101100011101000001101001101010110111010010000001110")]
		
		[TestCase("01101011000101100111011100011110101011110100011101000010111011100000000111110000101110010101101101010101100100100100111110101101001000110000010110100110010000111000000110001",
		"01001110011101010011111011110011111000110000001010100110110011001001001101001011110000111010101011101011000011110011011101100010000100101101000110011001001000101100101111011",
		"10010111100110111010011111101111111001010111000111001000111011110000111011110011110000011110010001000101100101001010111101010101110010011110010100011110011110111101000001110")]

		public void MultiplicationTests(string a, string b, string expected) 
		{
			var a_number = new Polynomial(a);
			var b_number = new Polynomial(b);
			
			var actual = a_number.MultiplyBy(b_number).ToBit();

			Assert.AreEqual(expected, actual);
		}
		//-----------------Gorner-------------------------------------------------------------------------------------------------------------------------------------------------------------------|		

		[Test]

		[TestCase ("11101111110110111001011011111101001101000000000100111101100011010011000110011100101111111010111011111010001111111101110111001100011010000010001011100111010110100010001111011" ,
		"01111101001010101100010010110111100010101100011101111100011010010110000110011110001111110000101011101001110000110011000111110110111110000011101010000011100010001000010111010" ,
		"01001011001010110101110001110101100000101011011011000110110110001110001100111000001101111101110001111001111110110011011001100010101110111110001000010010100001110100010100100")]

		[TestCase ("10001001000110110111011000001001111101011001110111010010000011001111100101111100110000101110111011111111100110110001111111011000101000001000100011000100011110101101111101000" ,
		"10011011000010100110110110101010000001101001111010010011001111110010101101000101000101110001111000001101100001100111001100101110110110010001000111011110101111011101011011011" ,
		"01111000100001000110011110110100000000100110010000110110001011001111011100011100100010010101000011111011110010111111111000110100110111011011000011000011100111100010111111101")]

		[TestCase ("10101111110111010000001010011110110101001100011010000100100110000010111111011101000001111101110000100101100011110110111110111100111101110111010011001011011010101110101110010" ,
		"10110101010101111100111011101100110110100011100110100101001010101000110010101011100110101000111000100011011001011001011000000010101000010000110010111011010100010000111000010" ,
		"01110000001000001110110110001100101000001100101100100011110000101111111001100010110101000111111110011000100001111010100110100011000001100001110101110100011101111111110000110")]

		[TestCase ("01001101110000001011111001000101001100011101111100010101001101111111110000101000010110000011010001010010111010111101111111101010000101111110000101010011100011100110001100011" ,
		"11100110011101101011111000100011001110110110111111011000000001011100101111000100000010110101001111100011001110110111110010010100001010111111111001101000000110110110010000010" ,
		"10111000111101000010000011100010010100011011001100100100111110010111000100110111101010010000100000011100010111010110111100011010001101100001101011011111101101100101001010101")]

		[TestCase ("11011101100111011000100001110010001010011110001100001000010000100001010011101001000111000001010100101110111100110011010110010110110000111001001011111110111001111010001000110" ,
		"11010110110111001100111100000011100101100010000111111100110110000110101101001110000010001101100111001101111010001001010101001000110011011110011011000001111000110101001001010" ,
		"10101101011110011001010011111001000110101110010101010010001000110110111101001010100100101001010010100010001010111011000011100110101010111001011010001011101000100010110000111")]

		[TestCase ("10011111100111011010010010000111000111110100000100000001000110101100000011001011111110111011110010010000010001101010100100011011010100100010111001111100001101100111001011110" ,
		"01100011101011101101010011011101100100100010110000101100101011011111010011110000111101000011101100000000010010101101000001100101011010110101001101101100100011011101000101001" ,
		"11110010010100100000000100111001001101010001010011011000101011011000010110110101010011001001011110100000011110001010101110111111010111001100101101110000100101111011101111101")]

		[TestCase ("10011111010100001110001011110110001100101010101000000101101001100110010001111010111000101111100110100110111001111110010000011111101011010101000110100111011011011001001011000" ,
		"00011111011010011001011001111110100100100101000011001100010010001001011001100000111010011010000010000111000010110010111011000001100111010111011100100010000010010011000100110" ,
		"00011111010110001101101001101001110000010101110001010101011011001000111001111000001000010000101110001000101000001000100010111111110000111100011010011000110000001000100100101")]

		[TestCase ("10011111100101101110010010000001111101000000100111101000110111010011111001001101000110110100000001111011110101111011111101110000001111111110000011100110110001100000101001001" ,
		"11001101000000100110100000000101111000010111010001111000011011100000101111101011110011101110110111111011100010001110110010001010011110100111000000011001111000100001111100100" ,
		"11111111000110111011001111110010010110111101110100111101101000110011101110010010110101110001011101101001101111011101101001000111010011110111001100110010111011100111111001000")]

		[TestCase ("01100110100111001010011001110101100100011101010101110110111100001111111010000001010101000100101100001011001010010110011000110111011011010111001011010001001001001011100101010" ,
		"01001011100111011101010110010110010110000011100101000111001011011100110100011111111000010001011100101110101000101110101000001011011101111011010101000110111101000100010011111" ,
		"11000101111001010100110100000000000101111010110001101101010111010101101000100100100100010000111100000000010100101110011000110100111101101101001100100101001001111011000101010")]

		public void GornerTests(string a, string b, string expected) 
		{
			var a_number = new Polynomial(a);
			var b_number = new Polynomial(b);
			
			var actual = a_number.GornerPower(b_number).ToBit();

			Assert.AreEqual(expected, actual);
		}
//-----------------Reverse-------------------------------------------------------------------------------------------------------------------------------------------------------------------|		

		[Test]
		
		[TestCase("10001000101010111100001101110101100110010111011101001100011110001001010000111001100110011001100111000010111000010011110110110000111110010110001100000101101111010101111011101",
		"01010001100000011101000110101100101110110010000001010000101110001011111010010000110000110111010000100100101101110001111101000001001110001001011000100101001111101010011011011")]

		[TestCase ("11001110001001000100010011111110111111010000101111001011010011010001001000001010001101010001101010001011011010111000101000101000101000011111111010000000101000101011011011011" ,
		"11011010011111000011001110010000111010101000010001100011010010001011001011100001101010010111110100110101111011111010011110101011101001111010111010011011110101010000100100111")]

		[TestCase ("10001001000100100111010010110111110011110010100010001110100110110011000011011000010011010100100001110100011001001000110010010001111110100100111011111000011110101000010001111" ,
		"00000010000011001100000010100110010101111000111011100100111101011101010111110110001111011000100101110000100110000101100011100000111000100011011011000110011001110100110000010")]

		public void ReverseTests(string a, string expected) 
		{
			var a_number = new Polynomial(a);
			
			var actual = a_number.Reverse().ToBit();

			Assert.AreEqual(expected, actual);
		}


//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    }
}
